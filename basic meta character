| 语法 | 备注 | 描述 |
| --- | --- | --- |
| `[a-z]` |  | 匹配任何包含小写字母 a-z 的字符串 |
| `[A-Z]` |  | 匹配任何包含大写字母 A-Z 的字符串 |
| `[0-9]` |  | 匹配任何包含数字 0-9 的字符串 |
| `[abc]` |  | 匹配任何包含小写字母 a、b、c 的字符串 |
| `[^abc]` |  | 匹配任何不包含小写字母 a、b、c 的字符串 |
| `[a-zA-Z0-9_]` |  | 匹配任何包含 a-zA-Z0-9 和下划线的字符串 |
| `\w` | wording | 匹配任何包含 a-zA-Z0-9 和下划线的字符串 (同上) |
| `\W` |  | 匹配任何没有下划线和字母数字的字符串 |
| `\d` | digit | 匹配任何数字字符,和 `[0-9]` 相同 |
| `\D` |  | 匹配任何非数字字符,和 `[^0-9]` 相同 |
| `\s` | string | 匹配任何空白字符 |
| `\S` |  | 匹配任何非空白字符 |
| `\b` | boundary | 匹配是否到达了单词边界 |
| `\B` |  | 匹配是否没有达到单词边界 |
| `\` |  | 匹配正则中的特殊字符（转为字面量） |

## 小中大括号在正则中的作用：

在正则表达式中,括号有以下不同的用途:

1. **小括号 `()`**:
   - **分组**: 将一个或多个字符组合成一个整体,可以对整个子模式应用限定符或进行引用。
   - **捕获组**: 被小括号括起来的模式会被捕获并编号,可以在后续中使用`\1`、`\2`等引用。
   - **非捕获组**: 使用`(?:pattern)`语法可以创建一个不会被捕获的分组。

2. **中括号 `[]`**:
   - **字符类**: 用于匹配方括号中列举的任意一个字符,如`[abc]`匹配 a、b 或 c。
   - **否定字符类(去反)**: 使用`[^abc]`可以匹配除 a、b、c 之外的任意字符。
   - **范围**: 可以使用`[a-z]`这种范围表示法来匹配一个字符区间。

3. **大括号 `{}`**:
   - **数量限定符**: 用于指定前面的模式出现的次数,如`a{3,5}`匹配 3 到 5 个 a。
   - **非贪婪限定符**: 在数量限定符后加`?`可以使其变为非贪婪模式,如`a{3,5}?`。

总的来说,小括号用于分组和捕获,中括号用于字符类,大括号用于数量限定。合理使用这些括号可以极大地增强正则表达式的表达能力和灵活性。
